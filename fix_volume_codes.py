#!/usr/bin/env python
"""
Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç volume_code ‡πÉ‡∏ô database
‡∏à‡∏≤‡∏Å "2569-MIT" ‡πÄ‡∏õ‡πá‡∏ô "MIT69" (‡∏ï‡∏≤‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_volume_code)
"""
import os
import django
import sys

# ‡πÄ‡∏û‡∏¥‡πà‡∏° project directory ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Python path
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, BASE_DIR)

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'edoc_system.settings')
django.setup()

from accounts.models import DocumentVolume, Receipt
from utils.fiscal_year import get_volume_code
from django.db import transaction

def main():
    print("="*80)
    print("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç volume_code ‡πÉ‡∏ô Database")
    print("="*80)
    print()

    volumes = DocumentVolume.objects.all().select_related('department').order_by('fiscal_year', 'department__code')

    if not volumes.exists():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DocumentVolume ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        return

    print(f"‡∏û‡∏ö {volumes.count()} ‡πÄ‡∏•‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    print()

    updates_needed = []

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏°‡πÑ‡∏´‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡πâ‡∏≤‡∏á
    for vol in volumes:
        correct_code = get_volume_code(vol.department.code, vol.fiscal_year)
        current_code = vol.volume_code

        if current_code != correct_code:
            updates_needed.append({
                'volume': vol,
                'old_code': current_code,
                'new_code': correct_code
            })

    if not updates_needed:
        print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤! volume_code ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        return

    print(f"‡∏û‡∏ö {len(updates_needed)} ‡πÄ‡∏•‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
    print("-" * 80)
    for item in updates_needed:
        vol = item['volume']
        print(f"  üìù ID {vol.id}: {vol.department.name}")
        print(f"     {item['old_code']} ‚Üí {item['new_code']}")
    print()

    # ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    confirm = input("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (yes/no): ").strip().lower()

    if confirm not in ['yes', 'y']:
        print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
        return

    print()
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...")
    print()

    try:
        with transaction.atomic():
            for item in updates_needed:
                vol = item['volume']
                old_code = item['old_code']
                new_code = item['new_code']

                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó volume_code
                vol.volume_code = new_code
                vol.save(update_fields=['volume_code'])

                print(f"‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ID {vol.id}: {old_code} ‚Üí {new_code}")

            print()
            print("="*80)
            print(f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó {len(updates_needed)} ‡πÄ‡∏•‡πà‡∏°")
            print("="*80)
            print()
            print("üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")
            print("  1. ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤ Document Numbering ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
            print("  2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PDF ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà http://localhost:8002/receipt/110/pdf/")
            print("  3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ‡πÄ‡∏•‡πà‡∏°‡∏ó‡∏µ‡πà ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô MIT69 ‡∏´‡∏£‡∏∑‡∏≠ PO69 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            print()
            print("üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:")
            print("  - Receipt model ‡πÉ‡∏ä‡πâ @property volume_code ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å department.code + ‡∏õ‡∏µ‡∏á‡∏ö")
            print("  - PDF ‡πÅ‡∏•‡∏∞ template ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á receipt.volume_code (computed) ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà volume.volume_code")

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
