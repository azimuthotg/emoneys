"""
Fiscal Year Information Card Utilities
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÅ‡∏ö‡∏ö Real-time
"""
from datetime import datetime, date, timedelta
from typing import Dict, Any
from .fiscal_year import (
    get_current_fiscal_year,
    get_fiscal_year_dates,
    format_fiscal_year_display
)


def get_fiscal_year_info_card() -> Dict[str, Any]:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    
    Returns:
        Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î
    """
    current_fy = get_current_fiscal_year()
    today = datetime.now().date()
    
    # ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    fy_start, fy_end = get_fiscal_year_dates(current_fy)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    if today <= fy_end:
        days_remaining = (fy_end - today).days
        is_current_fy = True
    else:
        # ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏ú‡∏∑‡πà‡∏≠)
        days_remaining = 0
        is_current_fy = False
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    total_days = (fy_end - fy_start).days + 1
    days_passed = total_days - days_remaining if is_current_fy else total_days
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    progress_percentage = (days_passed / total_days) * 100 if total_days > 0 else 0
    
    # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    next_fy = current_fy + 1
    next_fy_start, next_fy_end = get_fiscal_year_dates(next_fy)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if days_remaining <= 0:
        status = "completed"
        status_text = "‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß"
        status_color = "secondary"
    elif days_remaining <= 7:
        status = "ending_soon"
        status_text = "‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"
        status_color = "warning"
    elif days_remaining <= 30:
        status = "ending"
        status_text = "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"
        status_color = "info"
    else:
        status = "active"
        status_text = "‡∏õ‡∏Å‡∏ï‡∏¥"
        status_color = "success"
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if days_remaining > 0:
        if days_remaining == 1:
            countdown_text = "‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1 ‡∏ß‡∏±‡∏ô"
        else:
            countdown_text = f"‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {days_remaining} ‡∏ß‡∏±‡∏ô"
        
        if days_remaining <= 7:
            detail_text = f"{countdown_text} ‡∏à‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {current_fy}"
        elif days_remaining <= 30:
            detail_text = f"{countdown_text} ‡∏à‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {current_fy}"
        else:
            detail_text = f"{countdown_text} ‡∏à‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {current_fy}"
    else:
        countdown_text = "‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß"
        detail_text = f"‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {current_fy} ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß"
    
    # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
    if days_remaining <= 7 and days_remaining > 0:
        preparation_text = f"‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {next_fy}"
        show_next_fy_info = True
    else:
        preparation_text = None
        show_next_fy_info = False
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì stroke-dashoffset ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö progress circle
    # circumference = 2 * œÄ * r = 2 * œÄ * 54 = 339.292
    circumference = 339.292
    progress_dashoffset = circumference - (progress_percentage / 100 * circumference)
    
    return {
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        'current_fiscal_year': current_fy,
        'current_fy_display': format_fiscal_year_display(current_fy),
        'current_fy_start': fy_start,
        'current_fy_end': fy_end,
        'current_fy_start_thai': format_thai_date(fy_start),
        'current_fy_end_thai': format_thai_date(fy_end),
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        'next_fiscal_year': next_fy,
        'next_fy_display': format_fiscal_year_display(next_fy),
        'next_fy_start': next_fy_start,
        'next_fy_start_thai': format_thai_date(next_fy_start),
        'show_next_fy_info': show_next_fy_info,
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        'today': today,
        'today_thai': format_thai_date(today),
        'days_remaining': days_remaining,
        'days_passed': days_passed,
        'total_days': total_days,
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        'progress_percentage': progress_percentage,
        'progress_percentage_rounded': round(progress_percentage, 1),
        'progress_dashoffset': round(progress_dashoffset, 2),
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        'status': status,
        'status_text': status_text,
        'status_color': status_color,
        'countdown_text': countdown_text,
        'detail_text': detail_text,
        'preparation_text': preparation_text,
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        'is_transition_period': days_remaining <= 7 and days_remaining > 0,
        'is_current_fy': is_current_fy,
        'week_remaining': days_remaining <= 7,
        'month_remaining': days_remaining <= 30,
    }


def format_thai_date(date_obj: date) -> str:
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
    
    Args:
        date_obj (date): ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        
    Returns:
        str: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô "24 ‡∏Å.‡∏¢. 2568"
    """
    thai_months = [
        '', '‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
        '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'
    ]
    
    thai_year = date_obj.year + 543
    thai_month = thai_months[date_obj.month]
    
    return f"{date_obj.day} {thai_month} {thai_year}"


def get_volume_status_summary(current_fy: int) -> Dict[str, Any]:
    """
    ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏•‡πà‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    
    Args:
        current_fy (int): ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        
    Returns:
        Dict: ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏•‡πà‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    """
    try:
        from accounts.models import DocumentVolume, Department
        
        # ‡πÄ‡∏•‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ
        total_volumes = DocumentVolume.objects.filter(fiscal_year=current_fy).count()
        active_volumes = DocumentVolume.objects.filter(
            fiscal_year=current_fy, 
            status='active'
        ).count()
        closed_volumes = total_volumes - active_volumes
        
        # ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        total_departments = Department.objects.filter(is_active=True).count()
        
        # ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
        departments_with_volumes = DocumentVolume.objects.filter(
            fiscal_year=current_fy
        ).values_list('department_id', flat=True).distinct().count()
        
        # ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏°
        departments_without_volumes = total_departments - departments_with_volumes
        
        # ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
        coverage_percentage = (departments_with_volumes / total_departments * 100) if total_departments > 0 else 0
        
        return {
            'total_volumes': total_volumes,
            'active_volumes': active_volumes,
            'closed_volumes': closed_volumes,
            'total_departments': total_departments,
            'departments_with_volumes': departments_with_volumes,
            'departments_without_volumes': departments_without_volumes,
            'coverage_percentage': round(coverage_percentage, 1),
            'has_volumes': total_volumes > 0,
            'full_coverage': departments_without_volumes == 0,
        }
        
    except ImportError:
        # ‡∏´‡∏≤‡∏Å models ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ import (‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ô testing)
        return {
            'total_volumes': 0,
            'active_volumes': 0,
            'closed_volumes': 0,
            'total_departments': 0,
            'departments_with_volumes': 0,
            'departments_without_volumes': 0,
            'coverage_percentage': 0,
            'has_volumes': False,
            'full_coverage': False,
        }


if __name__ == "__main__":
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    print("=" * 60)
    print("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì Real-time")
    print("=" * 60)
    
    info = get_fiscal_year_info_card()
    
    print(f"üóìÔ∏è  {info['current_fy_display']}")
    print(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {info['today_thai']}")
    print(f"‚è∞ {info['detail_text']}")
    print(f"üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {info['progress_percentage_rounded']}%")
    print(f"üö¶ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {info['status_text']}")
    
    if info['preparation_text']:
        print(f"‚ö†Ô∏è  {info['preparation_text']}")
    
    print()
    print("üè¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏•‡πà‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:")
    volume_info = get_volume_status_summary(info['current_fiscal_year'])
    print(f"   ‡πÄ‡∏•‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {volume_info['total_volumes']}")
    print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°: {volume_info['coverage_percentage']}%")