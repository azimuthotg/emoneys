#!/usr/bin/env python
"""
Back Test Script - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö DocumentVolume ‡πÅ‡∏•‡∏∞ Receipt
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ code ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
"""
import os
import django
import sys

# ‡πÄ‡∏û‡∏¥‡πà‡∏° project directory ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Python path
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, BASE_DIR)

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'edoc_system.settings')
django.setup()

from accounts.models import DocumentVolume, Receipt, Department
from utils.fiscal_year import get_volume_code, get_current_fiscal_year, get_fiscal_year_from_date
from datetime import datetime

def test_volume_code_format():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ volume_code ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (MIT69, PO69)"""
    print("\n" + "="*80)
    print("TEST 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö volume_code")
    print("="*80)

    volumes = DocumentVolume.objects.all()
    passed = 0
    failed = 0

    for vol in volumes:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ volume_code ‡πÑ‡∏°‡πà‡∏°‡∏µ prefix ‡∏õ‡∏µ‡∏á‡∏ö (‡πÑ‡∏°‡πà‡∏°‡∏µ 2569-)
        expected_code = get_volume_code(vol.department.code, vol.fiscal_year)

        if vol.volume_code == expected_code:
            print(f"  ‚úÖ {vol.volume_code} - {vol.department.name}")
            passed += 1
        else:
            print(f"  ‚ùå {vol.volume_code} ‚â† {expected_code} - {vol.department.name}")
            failed += 1

    print(f"\n  ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ‚úÖ {passed} / ‚ùå {failed}")
    return failed == 0

def test_volume_counts_accuracy():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ last_document_number ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏£‡∏¥‡∏á"""
    print("\n" + "="*80)
    print("TEST 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á last_document_number")
    print("="*80)

    volumes = DocumentVolume.objects.all()
    passed = 0
    failed = 0

    for vol in volumes:
        # ‡∏ô‡∏±‡∏ö‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏£‡∏¥‡∏á
        actual_count = Receipt.objects.filter(
            department=vol.department,
            status='completed',
            receipt_date__gte=vol.fiscal_year_start,
            receipt_date__lte=vol.fiscal_year_end
        ).count()

        if vol.last_document_number == actual_count:
            print(f"  ‚úÖ {vol.volume_code}: {vol.last_document_number} ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç")
            passed += 1
        else:
            print(f"  ‚ùå {vol.volume_code}: last_document_number={vol.last_document_number} ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á={actual_count}")
            failed += 1

    print(f"\n  ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ‚úÖ {passed} / ‚ùå {failed}")
    return failed == 0

def test_receipt_volume_code_property():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Receipt.volume_code (@property) ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
    print("\n" + "="*80)
    print("TEST 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Receipt.volume_code (@property)")
    print("="*80)

    receipts = Receipt.objects.filter(status='completed').select_related('department')[:10]
    passed = 0
    failed = 0

    for receipt in receipts:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume_code ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if receipt.receipt_date:
            fiscal_year = get_fiscal_year_from_date(receipt.receipt_date)
            expected_code = get_volume_code(receipt.department.code, fiscal_year)

            if receipt.volume_code == expected_code:
                print(f"  ‚úÖ {receipt.receipt_number}: volume_code={receipt.volume_code}")
                passed += 1
            else:
                print(f"  ‚ùå {receipt.receipt_number}: {receipt.volume_code} ‚â† {expected_code}")
                failed += 1

    print(f"\n  ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ‚úÖ {passed} / ‚ùå {failed}")
    return failed == 0

def test_departments_without_volumes():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    print("\n" + "="*80)
    print("TEST 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡πÄ‡∏•‡πà‡∏°")
    print("="*80)

    current_fy = get_current_fiscal_year()

    # ‡∏´‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    departments_with_receipts = Receipt.objects.filter(
        status='completed'
    ).values_list('department_id', flat=True).distinct()

    # ‡∏´‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏°
    departments_with_volumes = DocumentVolume.objects.filter(
        fiscal_year=current_fy
    ).values_list('department_id', flat=True)

    # ‡∏´‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏°
    missing = set(departments_with_receipts) - set(departments_with_volumes)

    if len(missing) == 0:
        print("  ‚úÖ ‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏°‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
        return True
    else:
        print(f"  ‚ö†Ô∏è  ‡∏û‡∏ö {len(missing)} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏°:")
        for dept_id in missing:
            dept = Department.objects.get(id=dept_id)
            count = Receipt.objects.filter(department=dept, status='completed').count()
            print(f"     - {dept.name} ({dept.code}): {count} ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç")
        print("\n  üí° ‡∏£‡∏±‡∏ô: python fix_missing_volumes.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡πà‡∏°‡πÉ‡∏´‡πâ")
        return False

def test_receipt_number_format():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (ddmmyy/xxxx)"""
    print("\n" + "="*80)
    print("TEST 5: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç")
    print("="*80)

    receipts = Receipt.objects.filter(status='completed').exclude(receipt_number__isnull=True)[:10]
    passed = 0
    failed = 0

    import re
    pattern = re.compile(r'^\d{6}/\d{4}$')

    for receipt in receipts:
        if pattern.match(receipt.receipt_number):
            print(f"  ‚úÖ {receipt.receipt_number} - {receipt.department.code}")
            passed += 1
        else:
            print(f"  ‚ùå {receipt.receipt_number} - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            failed += 1

    print(f"\n  ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ‚úÖ {passed} / ‚ùå {failed}")
    return failed == 0

def main():
    print("="*80)
    print("üß™ BACK TEST - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö DocumentVolume ‡πÅ‡∏•‡∏∞ Receipt")
    print("="*80)
    print(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {get_current_fiscal_year()}")

    # ‡∏£‡∏±‡∏ô tests
    test_results = []

    test_results.append(("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö volume_code", test_volume_code_format()))
    test_results.append(("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á last_document_number", test_volume_counts_accuracy()))
    test_results.append(("Receipt.volume_code property", test_receipt_volume_code_property()))
    test_results.append(("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡πÄ‡∏•‡πà‡∏°", test_departments_without_volumes()))
    test_results.append(("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", test_receipt_number_format()))

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    print("\n" + "="*80)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    print("="*80)

    passed_count = sum(1 for _, result in test_results if result)
    total_count = len(test_results)

    for test_name, result in test_results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"  {status} - {test_name}")

    print("\n" + "-"*80)
    print(f"  ‡∏ú‡πà‡∏≤‡∏ô: {passed_count}/{total_count} tests")

    if passed_count == total_count:
        print("\n  üéâ ‡∏ó‡∏∏‡∏Å tests ‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏°‡∏î! ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        print("\n  ‚ö†Ô∏è  ‡∏°‡∏µ tests ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")

    print("="*80)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
