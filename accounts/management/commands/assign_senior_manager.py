from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth import get_user_model
from accounts.models import Role, UserRole

User = get_user_model()


class Command(BaseCommand):
    help = '‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Senior Manager'

    def add_arguments(self, parser):
        parser.add_argument(
            '--ldap-uid',
            type=str,
            help='‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (LDAP UID) ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á'
        )
        parser.add_argument(
            '--username',
            type=str,
            help='Username ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á'
        )
        parser.add_argument(
            '--list-users',
            action='store_true',
            help='‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
        )
        parser.add_argument(
            '--remove',
            action='store_true',
            help='‡∏ñ‡∏≠‡∏î‡∏ñ‡∏≠‡∏ô Senior Manager role (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°)'
        )

    def handle(self, *args, **options):
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if options['list_users']:
            self.list_all_users()
            return

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ user ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        ldap_uid = options.get('ldap_uid')
        username = options.get('username')
        
        if not ldap_uid and not username:
            raise CommandError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ --ldap-uid ‡∏´‡∏£‡∏∑‡∏≠ --username ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ --list-users ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        user = self.find_user(ldap_uid, username)
        if not user:
            return

        # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        if options['remove']:
            self.remove_senior_manager_role(user)
        else:
            self.assign_senior_manager_role(user)

    def list_all_users(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.stdout.write('üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:')
        self.stdout.write('-' * 80)
        
        users = User.objects.filter(is_active=True).order_by('department', 'full_name')
        
        current_dept = None
        for user in users:
            if user.department != current_dept:
                current_dept = user.department
                self.stdout.write(f'\nüè¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô: {current_dept or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}')
                self.stdout.write('-' * 40)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            display_name = user.full_name or user.username
            roles = list(user.get_roles().values_list('display_name', flat=True))
            roles_str = ', '.join(roles) if roles else '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó'
            
            self.stdout.write(f'üë§ {display_name}')
            self.stdout.write(f'   üìß Username: {user.username}')
            if user.ldap_uid:
                self.stdout.write(f'   üÜî LDAP UID: {user.ldap_uid}')
            self.stdout.write(f'   üé≠ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: {roles_str}')
            self.stdout.write('')

    def find_user(self, ldap_uid, username):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        try:
            if ldap_uid:
                user = User.objects.get(ldap_uid=ldap_uid, is_active=True)
                self.stdout.write(f'üîç ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user.full_name or user.username} (LDAP: {ldap_uid})')
            else:
                user = User.objects.get(username=username, is_active=True)
                self.stdout.write(f'üîç ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user.full_name or user.username} (Username: {username})')
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            self.stdout.write(f'üè¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô: {user.department or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}')
            
            current_roles = list(user.get_roles().values_list('display_name', flat=True))
            if current_roles:
                self.stdout.write(f'üé≠ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {", ".join(current_roles)}')
            else:
                self.stdout.write('üé≠ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ‡πÑ‡∏°‡πà‡∏°‡∏µ')
            
            return user
            
        except User.DoesNotExist:
            identifier = ldap_uid or username
            self.stdout.write(f'‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {identifier}')
            self.stdout.write('üí° ‡πÉ‡∏ä‡πâ --list-users ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
            return None

    def assign_senior_manager_role(self, user):
        """‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô Senior Manager"""
        try:
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Senior Manager role
            senior_manager_role = Role.objects.get(name='senior_manager')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ role ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing_role = UserRole.objects.filter(
                user=user,
                role=senior_manager_role,
                is_active=True
            ).first()
            
            if existing_role:
                self.stdout.write(f'‚ö†Ô∏è  {user.full_name or user.username} ‡πÄ‡∏õ‡πá‡∏ô Senior Manager ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß')
                return
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á UserRole ‡πÉ‡∏´‡∏°‡πà
            UserRole.objects.create(
                user=user,
                role=senior_manager_role,
                is_active=True
            )
            
            self.stdout.write(f'‚úÖ ‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á {user.full_name or user.username} ‡πÄ‡∏õ‡πá‡∏ô Senior Manager ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
            self.stdout.write(f'üè¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô: {user.department}')
            self.stdout.write('')
            self.stdout.write('üéØ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:')
            self.stdout.write('   - ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å Department Manager ‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô')
            self.stdout.write('   - ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å Basic User ‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô')
            self.stdout.write('   - ‡∏î‡∏π‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á')
            self.stdout.write('   - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô')
            
        except Role.DoesNotExist:
            self.stdout.write('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Senior Manager role')
            self.stdout.write('üí° ‡∏£‡∏±‡∏ô: python manage.py setup_senior_manager ‡∏Å‡πà‡∏≠‡∏ô')

    def remove_senior_manager_role(self, user):
        """‡∏ñ‡∏≠‡∏î‡∏ñ‡∏≠‡∏ô Senior Manager role"""
        try:
            senior_manager_role = Role.objects.get(name='senior_manager')
            
            user_role = UserRole.objects.filter(
                user=user,
                role=senior_manager_role,
                is_active=True
            ).first()
            
            if not user_role:
                self.stdout.write(f'‚ö†Ô∏è  {user.full_name or user.username} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô Senior Manager')
                return
            
            user_role.is_active = False
            user_role.save()
            
            self.stdout.write(f'‚úÖ ‡∏ñ‡∏≠‡∏î‡∏ñ‡∏≠‡∏ô {user.full_name or user.username} ‡∏à‡∏≤‡∏Å Senior Manager ‡πÅ‡∏•‡πâ‡∏ß')
            
        except Role.DoesNotExist:
            self.stdout.write('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Senior Manager role')