from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from accounts.models import Department

User = get_user_model()


class Command(BaseCommand):
    help = '‡∏™‡∏£‡πâ‡∏≤‡∏á test user ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--username',
            type=str,
            default='usertest1',
            help='Username ‡∏Ç‡∏≠‡∏á test user (default: usertest1)'
        )
        parser.add_argument(
            '--password',
            type=str,
            default='usertest1',
            help='Password ‡∏Ç‡∏≠‡∏á test user (default: usertest1)'
        )
        parser.add_argument(
            '--department',
            type=str,
            default='‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ó‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
            help='‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á test user (default: ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ó‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£)'
        )
        parser.add_argument(
            '--full-name',
            type=str,
            help='‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ Test User + username)'
        )

    def handle(self, *args, **options):
        username = options['username']
        password = options['password']
        department_name = options['department']
        full_name = options.get('full_name') or f'Test User {username}'
        
        self.stdout.write(f'üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á Test User: {username}')
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if User.objects.filter(username=username).exists():
            self.stdout.write(f'‚ö†Ô∏è  Username "{username}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß')
            
            # ‡πÄ‡∏™‡∏ô‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            self.stdout.write('üîÑ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ', ending='')
            choice = input()
            
            if choice.lower() == 'y':
                self.update_existing_user(username, password, department_name, full_name)
            else:
                self.stdout.write('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á user')
            return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Department ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        department = self.get_or_create_department(department_name)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Test User
        try:
            user = User.objects.create_user(
                username=username,
                password=password,
                email=f'{username}@test.local',
                first_name='Test',
                last_name='User',
                full_name=full_name,
                department=department_name,
                ldap_uid=f'1234567890{username[-1:]}23',  # ‡∏™‡∏£‡πâ‡∏≤‡∏á fake LDAP UID (13 ‡∏´‡∏•‡∏±‡∏Å)
                npu_staff_id=f'TEST{username[-1:]}001',
                prefix_name='‡∏ô‡∏≤‡∏¢',
                first_name_th='‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
                last_name_th=f'‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ{username[-1:]}',
                position_title='‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
                staff_type='‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£',
                employment_status='‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
                approval_status='approved',  # ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ login ‡πÑ‡∏î‡πâ
                is_active=True
            )
            
            self.stdout.write(f'‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Test User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
            self.stdout.write(f'üë§ Username: {username}')
            self.stdout.write(f'üîë Password: {password}')
            self.stdout.write(f'üìß Email: {user.email}')
            self.stdout.write(f'üë®‚Äçüíº ‡∏ä‡∏∑‡πà‡∏≠: {full_name}')
            self.stdout.write(f'üè¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô: {department_name}')
            self.stdout.write(f'üÜî LDAP UID: {user.ldap_uid}')
            self.stdout.write('')
            self.stdout.write('üéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:')
            self.stdout.write(f'   1. Login ‡∏î‡πâ‡∏ß‡∏¢ username: {username}, password: {password}')
            self.stdout.write(f'   2. ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: python manage.py assign_senior_manager --username {username}')
            self.stdout.write('   3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Hierarchical Approval System')
            
        except Exception as e:
            self.stdout.write(f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}')

    def update_existing_user(self, username, password, department_name, full_name):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            user = User.objects.get(username=username)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            user.set_password(password)
            user.full_name = full_name
            user.department = department_name
            user.is_active = True
            user.approval_status = 'approved'
            user.save()
            
            self.stdout.write(f'‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó User "{username}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
            self.stdout.write(f'üîë Password ‡πÉ‡∏´‡∏°‡πà: {password}')
            self.stdout.write(f'üè¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô: {department_name}')
            
        except User.DoesNotExist:
            self.stdout.write(f'‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö User: {username}')

    def get_or_create_department(self, department_name):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Department ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ"""
        try:
            department, created = Department.objects.get_or_create(
                name=department_name,
                defaults={
                    'code': department_name[:10].upper(),
                    'description': f'‡πÅ‡∏ú‡∏ô‡∏Å{department_name}',
                    'is_active': True
                }
            )
            
            if created:
                self.stdout.write(f'‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô: {department_name}')
            else:
                self.stdout.write(f'üìã ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {department_name}')
                
            return department
            
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: {str(e)}')
            self.stdout.write('üí° ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å string ‡πÅ‡∏ó‡∏ô')
            return None